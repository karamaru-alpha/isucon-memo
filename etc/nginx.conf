user  www-data;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /run/nginx.pid;

events {
    # worker_rlimit_nofile / 2 >>> worker_connections(2048->4096とかでよさそう)
    worker_connections  4096;
    # コネクションの新規確立を同時に行う
    multi_accept on;
}

# OS全体で扱えるファイル数($ cat /proc/sys/fs/file-max) / workerプロセス数($ ps ax | grep nginx) >>> worker_rlimit_nofile
worker_rlimit_nofile 8192;

http {
    log_format with_time '$remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent" $request_time';
    access_log /var/log/nginx/access.log with_time;
    # access_log off;

    error_log /var/log/nginx/error.log warn;

    # 基本設定
    sendfile on;
    tcp_nopush on;
    server_tokens off;
    reset_timedout_connection on;
    keepalive_requests 20000;
    keepalive_timeout 120s;
    open_file_cache max=100 inactive=20s;
    types_hash_max_size 2048;

    # Nginx で キャッシュする場合に追加↓ キャッシュ先のファイル指定・2階層で保存・zone1というキー名で1M確保・1ギガまで使う・2分で削除
    # proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=2m;
    # proxy_temp_path  /var/cache/nginx/tmp;

    # エラー対応系
    # リクエストボディのバッファサイズ/警告が出たら追加(client request body is buffered to a temporary file)
    # 該当パスのバッファを消す方が早いかも(proxy_request_buffering off;)
    # client_body_buffer_size 32k;
    # レスポンスの先頭部分のバッファサイズ/エラーが出たら追加(upstream sent too big header while reading response header from upstream)
    # proxy_buffer_size 8k; 8->16->32k
    # レスポンスを格納するバッファ数とそのサイズ/警告が出たら追加(an upstream response is buffered to a temporary file)/最大同時接続数は減る
    # proxy_buffers 100 32k;
    # エラー対策(http2: client connection force closed via ClientConn.Close)
    # http2_max_requests 20000;

    # 圧縮系
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 1;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
}
